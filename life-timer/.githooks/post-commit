#!/usr/bin/env bash
# Append last commit subject and changed files to COPILOT_NOTES.md automatically
# Requires package.json script "postcommit"
#
# Hardening per Git docs and GitHub Actions behavior:
# - Skip when running in CI (GitHub sets CI=true)
# - Skip during rebase/merge operations
# - Avoid infinite loop when only the notes file changed
# - Auto-amend current commit to include the notes change, without creating an extra commit

set -u

REPO_ROOT="$(git rev-parse --show-toplevel 2>/dev/null || echo "")"
[ -n "$REPO_ROOT" ] || exit 0
NOTES_REL="life-timer/COPILOT_NOTES.md"
GIT_DIR="$(git rev-parse --git-dir)"

# 1) Skip in CI environments (GitHub Actions sets CI=true)
if [ "${CI:-}" = "true" ]; then
	exit 0
fi

# 2) Skip during rebase or merge sequences
if [ -d "$GIT_DIR/rebase-apply" ] || [ -d "$GIT_DIR/rebase-merge" ] || [ -f "$GIT_DIR/MERGE_HEAD" ]; then
	exit 0
fi

# 3) If the last commit only touched the notes file, skip to avoid loops
if git diff-tree --no-commit-id --name-only -r HEAD 2>/dev/null | grep -v -x "$NOTES_REL" | grep -q .; then
	: # other files changed; proceed
else
	# Either only notes changed or cannot determine; skip
	exit 0
fi

# 4) Run the node script from the life-timer directory
SCRIPT_DIR="$REPO_ROOT/life-timer"
if [ -d "$SCRIPT_DIR" ]; then
	( cd "$SCRIPT_DIR" && npm run --silent postcommit >/dev/null 2>&1 ) || true
fi

# 5) If notes file changed, stage and amend current commit without re-triggering hooks
if ! git -C "$REPO_ROOT" diff --quiet -- "$NOTES_REL"; then
	git -C "$REPO_ROOT" add "$NOTES_REL" || true
	# --no-verify to avoid hook recursion; if amend fails, ignore to not break commit flow
	git -C "$REPO_ROOT" commit --amend --no-edit --no-verify >/dev/null 2>&1 || true
fi
