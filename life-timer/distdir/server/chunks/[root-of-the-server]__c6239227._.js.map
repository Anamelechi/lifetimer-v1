{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":["file:///app/src/app/api/geo/route.js"],"sourcesContent":["export const dynamic = 'force-dynamic';\n\n// Helper: fetch with timeout\nasync function fetchWithTimeout(url, opts = {}, timeoutMs = 10000) {\n  const ctrl = new AbortController();\n  const id = setTimeout(() => ctrl.abort(), timeoutMs);\n  try {\n    const res = await fetch(url, { ...opts, signal: ctrl.signal });\n    return res;\n  } finally {\n    clearTimeout(id);\n  }\n}\n\n// Helper: offset at given UTC instant for an IANA zone\nfunction offsetSecondsAtUtc(iana, dateUtc) {\n  try {\n    const dtf = new Intl.DateTimeFormat('en-US', {\n      timeZone: iana,\n      year: 'numeric', month: '2-digit', day: '2-digit',\n      hour: '2-digit', minute: '2-digit', second: '2-digit',\n      hour12: false,\n    });\n    const parts = dtf.formatToParts(dateUtc);\n    const get = (t) => Number(parts.find(p => p.type === t)?.value || 0);\n    const y = get('year');\n    const m = get('month');\n    const d = get('day');\n    const hh = get('hour');\n    const mm = get('minute');\n    const ss = get('second');\n  const asUtc = Date.UTC(y, m - 1, d, hh, mm, ss);\n  // Raw difference in seconds between the local wall time interpreted as UTC and the actual UTC instant.\n  let diff = Math.round((asUtc - dateUtc.getTime()) / 1000);\n  // Normalize into [-12h, +14h] to correct for date wrap-around.\n  const DAY = 86400;\n  while (diff > 14 * 3600) diff -= DAY;\n  while (diff < -12 * 3600) diff += DAY;\n  return diff;\n  } catch {\n    return null;\n  }\n}\n\n// Helper: given local wall time ISO (YYYY-MM-DDTHH:mm:ss) in IANA zone, compute offset seconds via fixed-point iteration\nfunction offsetSecondsAtLocal(iana, atLocalIso) {\n  try {\n    const [datePart, timePart = '00:00:00'] = atLocalIso.split('T');\n    const [y, m, d] = datePart.split('-').map(n => parseInt(n, 10));\n    const [hh, mm, ss] = timePart.split(':').map(n => parseInt(n, 10));\n    const wallUtcBase = Date.UTC(y, (m || 1) - 1, d || 1, hh || 0, mm || 0, ss || 0);\n    let utcMs = wallUtcBase;\n    for (let i = 0; i < 5; i++) {\n      const off = offsetSecondsAtUtc(iana, new Date(utcMs));\n      const nextUtc = wallUtcBase - off * 1000;\n      if (Math.abs(nextUtc - utcMs) < 1000) return off;\n      utcMs = nextUtc;\n    }\n    return offsetSecondsAtUtc(iana, new Date(utcMs));\n  } catch {\n    return null;\n  }\n}\n\n// Simple geocoding + timezone lookup via Open-Meteo geocoding and local Intl offset calc\n// GET /api/geo?city=Rome&country=Italy&at=1990-05-01T12:00\nexport async function GET(req) {\n  try {\n    const { searchParams } = new URL(req.url);\n    const city = (searchParams.get('city') || '').trim();\n    const country = (searchParams.get('country') || '').trim();\n    const at = (searchParams.get('at') || '').trim(); // ISO string for when to evaluate UTC offset\n    if (!city) return new Response(JSON.stringify({ error: 'city required' }), { status: 400 });\n\n    // Use Open-Meteo geocoding to resolve lat/lon and timezone\n    const q = country ? `${city}, ${country}` : city;\n    const geoUrl = `https://geocoding-api.open-meteo.com/v1/search?name=${encodeURIComponent(q)}&count=1&language=en&format=json`;\n    let first = null;\n    try {\n      const geoRes = await fetchWithTimeout(geoUrl, { cache: 'no-store' }, 8000);\n      if (geoRes.ok) {\n        const geo = await geoRes.json();\n        first = geo?.results?.[0] || null;\n      }\n    } catch {}\n\n    // Offline/local fallback for common cities\n    const key = q.toLowerCase();\n    const offline = {\n      'rome, italy': { name: 'Rome', country: 'Italy', admin1: 'Lazio', latitude: 41.9028, longitude: 12.4964, timezone: 'Europe/Rome' },\n      'rome': { name: 'Rome', country: 'Italy', admin1: 'Lazio', latitude: 41.9028, longitude: 12.4964, timezone: 'Europe/Rome' },\n      'london, united kingdom': { name: 'London', country: 'United Kingdom', admin1: 'England', latitude: 51.5074, longitude: -0.1278, timezone: 'Europe/London' },\n      'london': { name: 'London', country: 'United Kingdom', admin1: 'England', latitude: 51.5074, longitude: -0.1278, timezone: 'Europe/London' },\n      'new york, united states': { name: 'New York', country: 'United States', admin1: 'New York', latitude: 40.7128, longitude: -74.006, timezone: 'America/New_York' },\n      'new york': { name: 'New York', country: 'United States', admin1: 'New York', latitude: 40.7128, longitude: -74.006, timezone: 'America/New_York' },\n      'sapele, nigeria': { name: 'Sapele', country: 'Nigeria', admin1: 'Delta', latitude: 5.8941, longitude: 5.6767, timezone: 'Africa/Lagos' },\n      'sapele': { name: 'Sapele', country: 'Nigeria', admin1: 'Delta', latitude: 5.8941, longitude: 5.6767, timezone: 'Africa/Lagos' },\n    };\n    if (!first && offline[key]) first = offline[key];\n    if (!first) return new Response(JSON.stringify({ error: 'not_found' }), { status: 404 });\n\n    const latitude = first.latitude;\n    const longitude = first.longitude;\n    const timezone = first.timezone; // IANA name\n\n    // Compute utc offset seconds locally using Intl for the requested time\n    let utcOffsetSeconds = null;\n    if (timezone) {\n      if (at) {\n        utcOffsetSeconds = offsetSecondsAtLocal(timezone, at);\n      } else {\n        utcOffsetSeconds = offsetSecondsAtUtc(timezone, new Date());\n      }\n    }\n\n    return new Response(\n      JSON.stringify({\n        latitude,\n        longitude,\n        timezone,\n        utcOffsetSeconds,\n  city: first.name,\n  country: first.country,\n  admin1: first.admin1 || null,\n      }),\n      { status: 200, headers: { 'content-type': 'application/json' } }\n    );\n  } catch (e) {\n    return new Response(JSON.stringify({ error: 'internal_error' }), { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}