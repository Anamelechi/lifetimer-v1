{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":["file:///app/src/app/api/fact/route.js"],"sourcesContent":["// Route Handler to fetch a lifetime-related fact via Wikipedia (free)\n// Strategy:\n// - For a requested year, fetch the \"Events\" section from the year's Wikipedia page\n// - Parse bullet items from wikitext and deterministically pick one based on the current day\n// - If parsing fails, fall back to the year's page summary or a generic message\n// Docs:\n// - Next.js Route Handlers: https://nextjs.org/docs/app/building-your-application/routing/route-handlers\n// - Wikipedia API: https://www.mediawiki.org/wiki/API:Main_page\n\nexport const dynamic = 'force-dynamic';\n\nexport async function GET(request) {\n  const { searchParams } = new URL(request.url);\n  const year = searchParams.get('year');\n  if (!year) return Response.json({ error: 'Missing year' }, { status: 400 });\n\n  // Fallback static JSON if errors\n  async function fallback() {\n    return { text: `You were born around ${year}. The world has changed a lot since then.`, year: Number(year) };\n  }\n\n  // Deterministic index for \"today\"\n  function dayIndex() {\n    const d = Math.floor(Date.now() / 86400000); // days since epoch UTC\n    return d;\n  }\n\n  // Wikimedia User-Agent requirement: https://meta.wikimedia.org/wiki/User-Agent_policy\n  const UA = 'Life-Timer/0.1 (https://github.com/Anamelechi/Life-timer-production)';\n\n  // Extract bullet items from section HTML (<li> elements)\n  function extractBulletsFromHTML(html) {\n    if (!html) return [];\n    const items = [];\n    const liRegex = /<li\\b[^>]*>([\\s\\S]*?)<\\/li>/gi;\n    let m;\n    while ((m = liRegex.exec(html)) !== null) {\n      let t = htmlToPlain(m[1]);\n      t = stripCitations(t)\n        .replace(/\\s+/g, ' ')\n        .trim();\n      if (t && t.length > 20) items.push(t);\n    }\n    return items;\n  }\n\n  // Decode common HTML entities and numeric references\n  function decodeHtmlEntities(str) {\n    if (!str) return '';\n    let s = str\n      .replace(/&#x([0-9a-fA-F]+);/g, (_, hex) => String.fromCodePoint(parseInt(hex, 16)))\n      .replace(/&#(\\d+);/g, (_, num) => String.fromCodePoint(parseInt(num, 10)))\n      .replace(/&nbsp;/g, ' ')\n      .replace(/&amp;/g, '&')\n      .replace(/&quot;/g, '\"')\n      .replace(/&apos;/g, \"'\")\n      .replace(/&lt;/g, '<')\n      .replace(/&gt;/g, '>')\n      .replace(/&(ndash|#8211|#x2013);/g, '–')\n      .replace(/&(mdash|#8212|#x2014);/g, '—')\n      .replace(/&(ldquo|#8220|#x201C);/g, '“')\n      .replace(/&(rdquo|#8221|#x201D);/g, '”')\n      .replace(/&(lsquo|#8216|#x2018);/g, '‘')\n      .replace(/&(rsquo|#8217|#x2019);/g, '’');\n    return s;\n  }\n\n  // Remove bracketed citation markers like [57], [citation needed], etc.\n  function stripCitations(text) {\n    if (!text) return '';\n    let t = text;\n    // Collapsed multiple numeric refs like [57][58]\n    t = t.replace(/(\\s*\\[\\s*\\d+\\s*\\])+\\s*/g, ' ');\n    // Single bracketed references or maintenance tags\n    t = t.replace(/\\s*\\[(?:\\d+|citation needed|clarification needed|when\\?|who\\?|note \\d+)\\]\\s*/gi, ' ');\n    return t;\n  }\n\n  // Convert snippet HTML to plain, decoded text with references removed\n  function htmlToPlain(snippetHtml) {\n    if (!snippetHtml) return '';\n    const withoutRefs = snippetHtml\n      .replace(/<sup\\b[^>]*>[\\s\\S]*?<\\/sup>/gi, '')\n      .replace(/<sub\\b[^>]*>[\\s\\S]*?<\\/sub>/gi, '');\n    const text = withoutRefs\n      .replace(/<a[^>]*>([\\s\\S]*?)<\\/a>/gi, '$1')\n      .replace(/<\\/?(b|i|strong|em|span|small)[^>]*>/gi, '')\n      .replace(/<[^>]+>/g, '');\n    return decodeHtmlEntities(text);\n  }\n\n  async function fetchEventsSectionHTML(y) {\n    const api = 'https://en.wikipedia.org/w/api.php';\n    // 1) find sections for the page titled by the year (e.g., \"1990\")\n    const secUrl = `${api}?action=parse&page=${encodeURIComponent(y)}&prop=sections&format=json&redirects=1`;\n    const secRes = await fetch(secUrl, { next: { revalidate: 0 }, headers: { 'User-Agent': UA } });\n    if (!secRes.ok) return null;\n    const secJson = await secRes.json();\n    const sections = secJson?.parse?.sections || [];\n    const eventSection = sections.find((s) => /events/i.test(s.line));\n    if (!eventSection) return null;\n    const idx = eventSection.index;\n    // 2) get HTML for that section\n    const txtUrl = `${api}?action=parse&page=${encodeURIComponent(y)}&prop=text&section=${idx}&format=json&formatversion=2&redirects=1`;\n    const txtRes = await fetch(txtUrl, { next: { revalidate: 0 }, headers: { 'User-Agent': UA } });\n    if (!txtRes.ok) return null;\n    const txtJson = await txtRes.json();\n    // formatversion=2 returns text as a simple string\n    const html = txtJson?.parse?.text || '';\n    return html || null;\n  }\n\n  async function fetchYearSummary(y) {\n    const sumRes = await fetch(`https://en.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(y)}`,\n      { next: { revalidate: 0 }, headers: { 'User-Agent': UA } });\n    if (!sumRes.ok) return null;\n    const json = await sumRes.json();\n    return json?.extract || null;\n  }\n\n  function monthNameToNumber(name) {\n    const months = {\n      January: 1, February: 2, March: 3, April: 4, May: 5, June: 6,\n      July: 7, August: 8, September: 9, October: 10, November: 11, December: 12\n    };\n    return months[name] || null;\n  }\n\n  function firstSentence(s) {\n    if (!s) return '';\n    // Normalize, decode, and strip citations\n    let t = stripCitations(decodeHtmlEntities(s))\n      // remove leading carets/citation markers and trailing citation-only phrases\n      .replace(/^\\^\\s*/, '')\n      .replace(/\\s*Retrieved\\s.+$/i, '')\n      .replace(/\\s*Archived\\s.+$/i, '')\n      .replace(/\\s*CS1\\s+[^.]+\\.?$/i, '')\n      .replace(/\\s*\\(link\\)\\s*$/i, '');\n    // keep up to first period if very long\n    const idx = t.indexOf('.');\n    if (idx > 0 && idx < 200) t = t.slice(0, idx + 1);\n  t = t.trim();\n  // Remove trailing dangling punctuation left by stripped citations\n  t = t.replace(/[;:]+\\s*$/g, '').replace(/\\s{2,}/g, ' ');\n  return t;\n  }\n\n  function formatFact(y, dateStr, eventText) {\n    const core = firstSentence(eventText).replace(/[\\s\\u00A0]+/g, ' ').trim();\n    const quoted = core.endsWith('.') ? `\"${core}\"` : `\"${core}.\"`;\n    if (dateStr) return `In ${y} when you were born, on ${dateStr}, ${quoted}`;\n    return `In ${y} when you were born, ${quoted}`;\n  }\n\n  try {\n    // Try Events first (HTML list items) with month/day extraction\n    const html = await fetchEventsSectionHTML(year);\n    if (html) {\n      const items = [];\n      let currentMonth = null;\n      const token = /<(h[2-4])[^>]*>\\s*<span[^>]*id=\"(January|February|March|April|May|June|July|August|September|October|November|December)\"[^>]*>.*?<\\/\\1>|<li\\b[^>]*>([\\s\\S]*?)<\\/li>/gi;\n      let m;\n      while ((m = token.exec(html)) !== null) {\n        if (m[2]) {\n          currentMonth = m[2];\n          continue;\n        }\n        if (m[3]) {\n          // Clean inner HTML to text\n          const raw = stripCitations(htmlToPlain(m[3]))\n            .replace(/\\s+/g, ' ')\n            .trim();\n          if (!raw || raw.length < 20) continue;\n          // Skip lines that look like pure references or author lists\n          if (/^Writers,|^Author(s)?:|^By\\s/i.test(raw)) continue;\n          // Try patterns for explicit month/day\n          let dateStr = null;\n          let text = raw;\n          let mm = null, dd = null;\n          const fullDate = raw.match(/^(January|February|March|April|May|June|July|August|September|October|November|December)\\s+(\\d{1,2})(?:\\s*\\([^)]*\\))?\\s*[–-]\\s*(.+)$/);\n          if (fullDate) {\n            mm = monthNameToNumber(fullDate[1]);\n            dd = parseInt(fullDate[2], 10);\n            text = fullDate[3];\n          } else {\n            const dayOnly = raw.match(/^(\\d{1,2})(?:\\s*\\([^)]*\\))?\\s*[–-]\\s*(.+)$/);\n            if (dayOnly && currentMonth) {\n              mm = monthNameToNumber(currentMonth);\n              dd = parseInt(dayOnly[1], 10);\n              text = dayOnly[2];\n            }\n          }\n          if (mm && dd) {\n            const monthNames = [ '', 'January','February','March','April','May','June','July','August','September','October','November','December' ];\n            dateStr = `${monthNames[mm]} ${dd}`;\n          }\n          // Only keep items that have a resolved date to avoid reference-only bullets\n          if (dateStr) {\n            items.push({ dateStr, text });\n          }\n        }\n      }\n      if (items.length > 0) {\n        const idx = dayIndex() % items.length;\n        const pick = items[idx];\n        const body = formatFact(Number(year), pick.dateStr, pick.text);\n        return new Response(body, { headers: { 'Content-Type': 'text/plain; charset=utf-8' } });\n      }\n    }\n    // Fallback to summary\n    const summary = await fetchYearSummary(year);\n    if (summary) {\n      const body = formatFact(Number(year), null, summary);\n      return new Response(body, { headers: { 'Content-Type': 'text/plain; charset=utf-8' } });\n    }\n    const fb = await fallback();\n    return new Response(formatFact(Number(year), null, fb.text), { headers: { 'Content-Type': 'text/plain; charset=utf-8' } });\n  } catch (e) {\n    const fb = await fallback();\n    return new Response(formatFact(Number(year), null, fb.text), { headers: { 'Content-Type': 'text/plain; charset=utf-8' } });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}