name: CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

concurrency:
  group: ci-cd-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  NODE_VERSION: '20.x'
  WORKING_DIR: life-timer

jobs:
  ci:
    name: Lint and build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ${{ env.WORKING_DIR }}/package-lock.json

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Lint
        run: npm run lint --if-present

      - name: Build
        run: npm run build

  deploy:
    name: Deploy to server (rebuild on host)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: ci
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create app bundle (source only)
        run: |
          tar \
            --exclude='.next' \
            --exclude='node_modules' \
            --exclude='.git' \
            --exclude='.github' \
            -czf life-timer-app.tar.gz -C life-timer .

      - name: Copy app bundle to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "life-timer-app.tar.gz"
          target: "${{ secrets.DEPLOY_PATH }}/tmp"

      - name: Remote deploy
        uses: appleboy/ssh-action@v1.2.0
        env:
          COMPOSE_FILE: ${{ secrets.COMPOSE_FILE }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          APP_SUBDIR: ${{ secrets.APP_SUBDIR }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: COMPOSE_FILE,DEPLOY_PATH,APP_SUBDIR
          script: |
            set -eu
            if [ -z "${DEPLOY_PATH}" ]; then
              echo "DEPLOY_PATH secret is not set" >&2
              exit 1
            fi
            if [ ! -d "${DEPLOY_PATH}" ]; then
              echo "DEPLOY_PATH does not exist: ${DEPLOY_PATH}" >&2
              exit 1
            fi
            cd "${DEPLOY_PATH}"
            echo "Working dir: $(pwd)"
            echo "Listing top-level files:"
            ls -la

            # Select docker compose CLI
            if docker compose version >/dev/null 2>&1; then
              DCMD="docker compose"
            elif command -v docker-compose >/dev/null 2>&1; then
              DCMD="docker-compose"
            else
              echo "docker compose not available on server" >&2
              exit 1
            fi

            # Place app source into build context subdirectory (default: app)
            APP_DIR_NAME="${APP_SUBDIR:-app}"
            APP_DIR_PATH="${DEPLOY_PATH}/${APP_DIR_NAME}"
            mkdir -p "${APP_DIR_PATH}"
            echo "Refreshing app sources in: ${APP_DIR_PATH}"
            rm -rf "${APP_DIR_PATH:?}"/*
            tar -xzf "${DEPLOY_PATH}/tmp/life-timer-app.tar.gz" -C "${APP_DIR_PATH}"
            rm -f "${DEPLOY_PATH}/tmp/life-timer-app.tar.gz" || true

            # Choose compose file to use
            CHOICES=(
              "${COMPOSE_FILE:-}"
              "${DEPLOY_PATH}/docker-compose.yml"
              "${DEPLOY_PATH}/docker-compose.prod.yml"
              "${DEPLOY_PATH}/life-timer/docker-compose.prod.yml"
            )
            COMPOSE_PATH=""
            for c in "${CHOICES[@]}"; do
              if [ -n "$c" ] && [ -f "$c" ]; then COMPOSE_PATH="$c"; break; fi
            done
            if [ -z "$COMPOSE_PATH" ]; then
              echo "No compose file found. Checked: ${CHOICES[*]}" >&2
              exit 1
            fi
            COMPOSE_DIR=$(dirname "$COMPOSE_PATH")
            COMPOSE_BASE=$(basename "$COMPOSE_PATH")
            echo "Compose directory: $COMPOSE_DIR"
            echo "Compose file: $COMPOSE_BASE"
            cd "$COMPOSE_DIR"

            # Resolve env file in compose directory per docs
            if [ -f ".env" ]; then
              ENV_FILE=".env"
            elif [ -f "../.env" ]; then
              ENV_FILE="../.env"
            elif [ -f "config/.env" ]; then
              ENV_FILE="config/.env"
            else
              ENV_FILE="/tmp/empty.env"; : > "$ENV_FILE"
            fi
            if [ ! -f "$ENV_FILE" ]; then
              echo "Resolved env path is not a file ($ENV_FILE). Using empty env instead." >&2
              ENV_FILE="/tmp/empty.env"; : > "$ENV_FILE"
            fi
            echo "Using env file: $ENV_FILE"; ls -ld "$ENV_FILE"

            # Stop containers and remove images so compose rebuilds cleanly
            ${DCMD} -f "$COMPOSE_BASE" --env-file "$ENV_FILE" down --remove-orphans --rmi local || true
            docker image prune -af || true

            # Build and start fresh containers using server Dockerfile/compose
            ${DCMD} -f "$COMPOSE_BASE" --env-file "$ENV_FILE" build --pull --no-cache
            ${DCMD} -f "$COMPOSE_BASE" --env-file "$ENV_FILE" up -d

            # Clean up any dangling resources
            docker system prune -f || true

            echo "Currently running containers:"
            docker ps --format '{{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}'
