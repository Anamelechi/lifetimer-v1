I want to build a Next.js 14 Progressive Web App called “Life Timer”.
Visual
• Dark gradient background with glassmorphism card.
• Top: large seconds-alive counter in monospace font.
• Row 1: Years | Months | Weeks | Days.
• Row 2: Hours | Minutes | Seconds.
• Toggle button “Show Weeks / Show Days”.
• Bottom card “Random Fact” with one interesting fact from the user’s lifetime.
Tech stack
• Scaffold with “npx create-next-app@latest life-timer --template with-pwa --js”
• JavaScript only.
• Tailwind CSS for styling.
• Zustand for state management.
• PWA manifest and service-worker via next-pwa.
Functionality
• One-time birth-date picker, stored in localStorage.
• Live counter updates every second.
• Pure helper functions for Y/M/W/D/H/M/S since birth.
• Toggle between “Show Weeks” and “Show Days”.
• Offline-ready: service-worker caches all assets.
Random facts
• Goal: search the web for events that happened during the user’s birth-year or period.
• Implementation: use Google Programmable Search API (or any web-search endpoint) to fetch results.
• Summarise the top result with Google Gemini.
• Cache the fact in IndexedDB so it works offline.
• If the search fails, fallback to a small static JSON.
Backend decision
• Static JSON will NOT scale for millions of users because:
– Facts become stale.
– No personalisation.
• Recommended: lightweight Python backend (FastAPI) that:
– Accepts ?year=YYYY.
– Searches Google via Programmable Search, calls Gemini for summary.
– Returns {text, year}.
– Caches results in Redis or SQLite.
• Deploy backend on Render / Fly.io / Railway.
Folder tree (learning template)
life-timer
├─ backend/ (optional FastAPI)
│  ├─ main.py
│  └─ requirements.txt
├─ src/
│  ├─ app/page.jsx
│  ├─ components/…
│  ├─ lib/dateCalc.js
│  └─ store/timerStore.js
├─ public/…
└─ next.config.js
Dev commands
npm install
npm run dev (localhost:3000)
npm run build && npm start (offline test)
Scaling note
• Static JSON is fine for the MVP but will not scale; switch to the Python backend for production to keep facts fresh and personalised.